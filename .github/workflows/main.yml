name: Docker Build and Deploy

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    types: [labeled]

env:
  IMAGE_NAME: ghcr.io/xoin-devs/xoinbot

jobs:
  build:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && (
        contains(github.event.pull_request.labels.*.name, 'build') ||
        contains(github.event.pull_request.labels.*.name, 'force deploy')
      ))
    outputs:
      TAG_NAME: ${{ steps.tagname.outputs.TAG_NAME }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build app
      run: |
        npm install --production

    - name: register commands
      run: |
        echo "Deploying new bot commands if needed :"
        node utils/deploy-commands.js

    - name: Docker Login
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ secrets.GH_USER }}
        password: ${{ secrets.GH_TOKEN }}

    - name: Determine Tag Name
      id: tagname
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" =~ refs/tags/ ]]; then
          TAG_NAME=$(echo "${{ github.ref }}" | awk -F'/' '{print $NF}')
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
        else
          echo "TAG_NAME=latest-SNAPSHOT" >> $GITHUB_OUTPUT
        fi

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        push: true
        tags: ${{ env.IMAGE_NAME }}:${{ steps.tagname.outputs.TAG_NAME }}
        no-cache: true

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'force deploy'))
    steps:
    - name: Deploy to Production
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.ID_RSA }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "${{ secrets.ID_RSA_PUB }}" > ~/.ssh/id_rsa.pub
        chmod 644 ~/.ssh/id_rsa.pub
        echo "${{ secrets.KNOWN_HOSTS }}" > ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_IP }} 'cd xoinbot && ./docker-run.sh ${{ env.IMAGE_NAME }}:${{ needs.build.outputs.TAG_NAME }}'

